#!/usr/bin/env node

const path = require('path')
const fs = require('fs')
const readline = require('readline');
const { execSync } = require('child_process');
const Config = require('../lib/utils/config')

const ContentDefault = {
  scripts: { test: "pagewalker" },
  dependencies: { pagewalker: "*" }
};

function getStdin(message) {
  const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
  return new Promise((resolve, _) => {
    rl.question(message, (answer) => {
      resolve(answer);
      rl.close();
    });
  });
}
// the dir where we're doin stuff.
const dir = process.cwd()
const packageFile = path.resolve(dir, 'package.json')
const scenarioDir = path.resolve(dir, 'test');
const downloadDir = path.resolve(dir, 'downloads');

async function main() {

  let createPackageJson = true;
  if(fs.existsSync(packageFile)){
    let overwriteIt = await getStdin(` - The file["package.json"] is found, overwrite it? (y/N)`);
    if (overwriteIt.trim().toUpperCase() == 'N') {
      createPackageJson = false;
    }
  }

  if (createPackageJson) {
    // npm init
    execSync('npm init -y', { cwd: dir })
    console.log(` - Done .... "npm init -y"`);
  }

  if(!fs.existsSync(packageFile)){
    console.log(` - The file["package.json"] is not found. Abort!`);
    process.exit(1);
  }

  let packageJsonText = fs.readFileSync(packageFile, 'utf-8');
  let jsonContent = null;
  try {
    jsonContent = JSON.parse(packageJsonText);
  } catch (e) {
    console.log(' - JSON parse error:', e);
    process.exit(1);
  }

  function copyContentDefault(obj, key) {
    if (!obj[key]) {
      obj[key] = {};
    }
    Object.assign(obj[key], ContentDefault[key]);
  }

  copyContentDefault(jsonContent, 'scripts');
  copyContentDefault(jsonContent, 'dependencies');

  fs.writeFileSync(packageFile, (JSON.stringify(jsonContent, null, 2) + '\n'), 'utf8');

  console.log(` - package.json is saved,  [${packageFile}]`)

  if(!fs.existsSync(scenarioDir)){
    fs.mkdirSync(scenarioDir);
    console.log(` - Done creating scenario directory. [${scenarioDir}]`)
  }

  if(!fs.existsSync(downloadDir)){
    fs.mkdirSync(downloadDir);
    console.log(` - Done creating downloads directory. [${downloadDir}]`)
  }

  let copySample = await getStdin(` - Do you want to create a sample scenario file?(y/N) `);
  if (copySample.trim().toUpperCase() == 'Y') {
    const destFile = path.resolve(scenarioDir, '01_sample_scenario.js')
    fs.copyFileSync(path.resolve(__dirname, '../example/01_sample_scenario.js'), destFile);
    console.log(` - Done createing sample scenario file. [${destFile}]`);
  }
  else{
    console.log(` - Skipped createing sample scenario file. `);
  }

  // save config.json
  fs.writeFileSync(path.resolve(dir, 'config.json'), (JSON.stringify(Config.DEFAULT_CONFIG, null, 2) + '\n'), 'utf8');
  console.log(` - Done createing configuration file. [${path.resolve(dir, 'config.json')}]`);
}

console.log("Initializing pagewaler project....");

main()
.then(() => {
  console.log("Finished initializing pagewalker project.")
  console.log("Next, please enter \n\t npm install\n\t npm test")
})
.catch((err) => {
  console.error("[ERROR] ", err);
  process.exit(1);
})